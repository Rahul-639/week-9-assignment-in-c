#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
int cmp(const void *a, const void *b) {
    return (*(int*)a - *(int*)b);
}
int binarySearch(int arr[], int size, int key) {
    int low = 0, high = size - 1;
    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (arr[mid] == key) return 1;
        else if (arr[mid] < key) low = mid + 1;
        else high = mid - 1;
    }
    return 0;
}
bool hasTwoSum(int arr[], int n, int target) {
    int *seen = (int*)malloc(n * sizeof(int));
    int seenSize = 0;
    for (int i = 0; i < n; i++) {
        int complement = target - arr[i];
        if (binarySearch(seen, seenSize, complement)) {
            free(seen);
            return true;
        }
        seen[seenSize++] = arr[i];
        qsort(seen, seenSize, sizeof(int), cmp);
    }
    free(seen);
    return false;
}
int main() {
    int arr1[] = {0, -1, 2, -3, 1};
    int n1 = sizeof(arr1) / sizeof(arr1[0]);
    printf("%s\n", hasTwoSum(arr1, n1, -2) ? "true" : "false"); 
    int arr2[] = {1, -2, 1, 0, 5};
    int n2 = sizeof(arr2) / sizeof(arr2[0]);
    printf("%s\n", hasTwoSum(arr2, n2, 0) ? "true" : "false"); 
    int arr3[] = {11};
    int n3 = sizeof(arr3) / sizeof(arr3[0]);
    printf("%s\n", hasTwoSum(arr3, n3, 11) ? "true" : "false"); 
    return 0;
}
