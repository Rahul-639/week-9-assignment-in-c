#include <stdio.h>
#include <stdlib.h>
int cmp(const void *a, const void *b) {
    return (*(int*)a - *(int*)b);
}
int binarySearch(int arr[], int n, int key) {
    int low = 0, high = n - 1;
    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (arr[mid] == key) return 1;
        else if (arr[mid] < key) low = mid + 1;
        else high = mid - 1;
    }
    return 0;
}
int longestConsecutiveSubseq(int arr[], int n) {
    if (n == 0) return 0;
    qsort(arr, n, sizeof(int), cmp);
    int longest = 1, currLen = 1;
    for (int i = 1; i < n; i++) {
        if (arr[i] == arr[i - 1] + 1) {
            currLen++;
        } else if (arr[i] != arr[i - 1]) {
            if (currLen > longest) longest = currLen;
            currLen = 1;
        }
    }
    if (currLen > longest) longest = currLen;
    return longest;
}
int main() {
    int arr1[] = {2, 6, 1, 9, 4, 5, 3};
    printf("%d\n", longestConsecutiveSubseq(arr1, n1)); 
    int arr2[] = {1, 9, 3, 10, 4, 20, 2};
    int n2 = sizeof(arr2) / sizeof(arr2[0]);
    printf("%d\n", longestConsecutiveSubseq(arr2, n2)); 
    int arr3[] = {15, 13, 12, 14, 11, 10, 9};
    int n3 = sizeof(arr3) / sizeof(arr3[0]);
    printf("%d\n", longestConsecutiveSubseq(arr3, n3)); 
    return 0;
}
